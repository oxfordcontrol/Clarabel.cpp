#ifndef CLARABEL_H
#define CLARABEL_H

/* Generated with cbindgen:0.24.5 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct CscMatrix_f64 {
  /**
   * number of rows
   */
  uintptr_t m;
  /**
   * number of columns
   */
  uintptr_t n;
  /**
   * CSC format column pointer.
   *
   * Ths field should have length `n+1`. The last entry corresponds
   * to the the number of nonzeros and should agree with the lengths
   * of the `rowval` and `nzval` fields.
   */
  const uintptr_t *colptr;
  /**
   * vector of row indices
   */
  const uintptr_t *rowval;
  /**
   * vector of non-zero matrix elements
   */
  const double *nzval;
  /**
   * Indicates whether the memory is owned by Rust. Should never be changed by the user.
   */
  bool mem_owned_by_rust;
} CscMatrix_f64;

typedef void DefaultSolver;

struct CscMatrix_f64 CscMatrix_f64_from(uintptr_t m, uintptr_t n, const double *matrix);

struct CscMatrix_f64 CscMatrix_f64_zeros(uintptr_t rows, uintptr_t cols);

void delete_CscMatrix_f64(const struct CscMatrix_f64 *matrix);

DefaultSolver *DefaultSolver_new(const struct CscMatrix_f64 *P,
                                 const double *q,
                                 const struct CscMatrix_f64 *A,
                                 const double *b,
                                 uintptr_t _n_cones,
                                 const void *_cones,
                                 const void *_settings);

void DefaultSolver_solve(DefaultSolver *solver);

void free_DefaultSolver(DefaultSolver *solver);

#endif /* CLARABEL_H */
