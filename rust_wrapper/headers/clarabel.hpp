#ifndef CLARABEL_H
#define CLARABEL_H

/* Generated with cbindgen:0.24.5 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdarg>
#include <cstdint>
#include <cstdlib>
#include <ostream>
#include <new>

namespace clarabel {

template<typename T>
struct CscMatrix {
  /**
   * number of rows
   */
  uintptr_t m;
  /**
   * number of columns
   */
  uintptr_t n;
  /**
   * CSC format column pointer.
   *
   * Ths field should have length `n+1`. The last entry corresponds
   * to the the number of nonzeros and should agree with the lengths
   * of the `rowval` and `nzval` fields.
   */
  const uintptr_t *colptr;
  /**
   * vector of row indices
   */
  const uintptr_t *rowval;
  /**
   * vector of non-zero matrix elements
   */
  const T *nzval;
  /**
   * Indicates whether the memory of colptr, rowval and nzval is owned by this struct. Should never be changed by the user.
   */
  bool owns_matrix_data;
};

using DefaultSolver = void;

template<typename T>
struct SupportedConeT {
  enum class Tag {
    /**
     * The zero cone (used for equality constraints).
     *
     * The parameter indicates the cones dimension.
     */
    ZeroConeT,
    /**
     * The nonnegative orthant.
     *
     * The parameter indicates the cones dimension.
     */
    NonnegativeConeT,
    /**
     * The second order cone / Lorenz cone / ice-cream cone.
     *
     * The parameter indicates the cones dimension.
     */
    SecondOrderConeT,
    /**
     * The exponential cone in R^3.
     *
     * This cone takes no parameters
     */
    ExponentialConeT,
    /**
     * The power cone in R^3.
     *
     * The parameter indicates the power.
     */
    PowerConeT,
  };

  struct ZeroConeT_Body {
    uintptr_t _0;
  };

  struct NonnegativeConeT_Body {
    uintptr_t _0;
  };

  struct SecondOrderConeT_Body {
    uintptr_t _0;
  };

  struct ExponentialConeT_Body {

  };

  struct PowerConeT_Body {
    T _0;
  };

  Tag tag;
  union {
    ZeroConeT_Body zero_cone_t;
    NonnegativeConeT_Body nonnegative_cone_t;
    SecondOrderConeT_Body second_order_cone_t;
    ExponentialConeT_Body exponential_cone_t;
    PowerConeT_Body power_cone_t;
  };
};

extern "C" {

CscMatrix<double> *CscMatrix_f64_from(uintptr_t m, uintptr_t n, const double *matrix);

CscMatrix<double> *CscMatrix_f64_zeros(uintptr_t rows, uintptr_t cols);

CscMatrix<double> *CscMatrix_f64_identity(uintptr_t n);

void delete_CscMatrix_f64(CscMatrix<double> *matrix);

DefaultSolver *DefaultSolver_f64_new(const CscMatrix<double> *P,
                                     const double *q,
                                     const CscMatrix<double> *A,
                                     const double *b,
                                     uintptr_t n_cones,
                                     const SupportedConeT<double> *cones,
                                     const void *_settings);

void DefaultSolver_solve(DefaultSolver *solver);

void free_DefaultSolver(DefaultSolver *solver);

} // extern "C"

} // namespace clarabel

#endif // CLARABEL_H
